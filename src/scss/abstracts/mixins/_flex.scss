/// Mixin flexível para display flex com lógica inteligente
///
/// @group utilities
/// @author Lucas Santos
/// @since 1.0.0
///
/// @param {string | null} $direction [null] - Direção do flex container
///   Valores aceitos: `row`, `row-reverse`, `column`, `column-reverse`
///   Se `null` ou `row`, não gera a propriedade (otimização)
/// @param {string} $justify [flex-start] - Alinhamento principal
///   Valores: `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `space-evenly`
/// @param {string} $align [stretch] - Alinhamento transversal
///   Valores: `stretch`, `flex-start`, `flex-end`, `center`, `baseline`
/// @param {length | null} $gap [null] - Espaçamento entre os itens
///   Exemplos: `1rem`, `10px`, `2em`
/// @param {string} $wrap [nowrap] - Quebra de linha dos itens
///   Valores: `nowrap`, `wrap`, `wrap-reverse`
/// @param {boolean} $center [false] - Atalho para centralização completa
///   Quando `true`, sobrescreve `$justify` e `$align` com `center`
/// @param {boolean} $between [false] - Atalho para space-between com center
///   Quando `true`, define `justify-content: space-between` e `align-items: center`
///
/// @example scss - Uso básico
///   .container {
///     @include flex($gap: 1rem);
///   }
///
/// @example scss - Direção column
///   .sidebar {
///     @include flex(column, $gap: 2rem);
///   }
///
/// @example scss - Centralizado
///   .modal {
///     @include flex($center: true);
///   }
///
/// @example scss - Space between
///   .navbar {
///     @include flex($between: true);
///   }
///
/// @example scss - Alinhamento customizado
///   .toolbar {
///     @include flex($justify: space-around, $align: center, $gap: 0.5rem);
///   }
///
/// @output
///   Gera apenas as propriedades necessárias, omitindo valores padrão
///   para CSS mais limpo e performático
///
/// @access public
@mixin flex(
  $direction: null,
  $justify: flex-start,
  $align: stretch,
  $gap: null,
  $wrap: nowrap,
  $center: false,
  $between: false
) {
  display: flex;

  // Só define flex-direction se for diferente do padrão
  @if $direction and $direction !=row {
    flex-direction: $direction;
  }

  // Só define flex-wrap se for diferente do padrão
  @if $wrap and $wrap !=nowrap {
    flex-wrap: $wrap;
  }

  @if $gap {
    gap: $gap;
  }

  @if $center {
    justify-content: center;
    align-items: center;
  } @else if $between {
    justify-content: space-between;
    align-items: center;
  } @else {
    justify-content: $justify;
    align-items: $align;
  }
}
